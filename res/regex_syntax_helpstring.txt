Characters and classes:
	matches...
.	Any character, incl. line breaks when option selected
[..]	Character class set ([abc]), range ([a-c]) or mix of both
[^..]	Negated char class
[:xyz:]	POSIX bracket expression
\d, \D	Any single digit, non-digit char
\s, \S	Any whitespace, non-whitespace char
\w, \W	Any word, non-word char
\h, \H	Any hexadecimal [0-9a-fA-F], non-hexadecimal char
\x##	Char whose code is the hex value ##h (0x##), from \x00 to \xFF
\###	Char whose code is the octal value ###o, from \000 to \777
\x{#}	Unicode char by hex value, for # => 0 to FFFF
\a	Bell character (\x07)
\t	Horizontal tab (\x09)
\n	Line feed (\x0a)
\v	Vertical tab (\x0b)
\f	Form feed (\x0c)
\r	Carriage return (\x0d)
\e	Escape (\x1b)

Anchors:
\A, \Z	Start, end of text
^,  $	Start, end of line (with or w/o \n)
\<, \>	Start, and of a word
\b, \B	Boundary, non-word boundary

Quantifier:
	matches preceding...
?	0 or 1 times
*	0 or more times
+	1 or more times
{n}	Exactly n times
{m,n}	Between m & n times (inclusive)
{,n}	Up to n times
..?	Non greedy modifier, e.g. ??, *?, +? & {m,n}?
..+	Possessive modifier, e.g. ?+, *+, ++ & {m,n}+

Subexpressions:
..|..	Alternation
(..)	Capturing group
(?:..)	Non-capturing group
(?>..)	Atomic group (non-capturing)
(#..)	Comment

Backrefs:
\#	For # => 1 to 9
\k<#>	For # => 1 and 99
\k'#'	For # => 1 and 99
(?P=#)	For # => 1 to 99

Named Capturing Groups:
(?<name>/regex/)  /or/  (?'name'/regex/)  /or/  (?P<name>/regex/)

Named Backrefs:
\k<name>  /or/  \k'name'  /or/  (?P=name)

Subroutine Calls:
\g<name>  /or/  \g'name'  /or/  (?P>name) /or/ (?&name)

Conditionals
..(?=/regex/)	Positive lookahead =>	first .. followed by /regex/
..(?!/regex/)	Negative lookahead =>	first .. *not* followed by /regex/
(?<=/regex/)..	Positive <= lookbehind	first .. preceeded by /regex/
(?<!/regex/)..	Negative <= lookbehind	first .. *not* preceeded by /regex/
(?(..)/then/|/else/)	Conditional: if (..) then match /then/; or else match /else/
