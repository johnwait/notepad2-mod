  Characters and classes:
       matches...
    .        Any character, incl. line breaks when the dialog option is
             ticked
    [..]     Character class set ([abc]), range ([a-c]) or a mix of both
             ([a-cfh-k])
    [^..]    Negated char class set ([^abc]), range ([^a-c]) or mixed
             ([^a-cfh-k])
    [:xyz:]  POSIX bracket expression (alnum, alpha, ascii, blank, cntrl,
             graph, lower, etc.)
    \d ; \D  Any single digit   ; Any non-digit character
    \s ; \S  Any whitespace     ; Any non-whitespace character
    \w ; \W  Any word character ; Any non-word character
    \h ; \H  Any hexadecimal (i.e. [0-9a-fA-F]) ; Any non-hexadecimal
             character
    \x##     ASCII char whose code is the hexadecimal value ##h (i.e. 0x##)
             is from \x00 to \xFF
    \###     ASCII char whose code is the octcal value ###o,
             from \000 to \777
    \x{#}    Unicode character by its hexadecimal codepoint value,
             for # => 0 to FFFF
    \t       Horizontal tab, i.e. \x09
    \v       Vertical tab, i.e. \x0B
    \n       Line feed, i.e. \x0A
    \r       Carriage return, i.e. \x0D
    \a       Bell character, i.e. \x07
    \e       Escape char, i.e. \x1B
    \f       Form feed, i.e. \x0C
  *** \b does NOT match backspace chars, i.e. \x08

  Anchors:
    \A ; \Z  Start of text ; End of text
    ^  ; $   Start of a line ; End of a line
    \< ; \>  Start of word ; End of word
    \b ; \B  Word boundary ; Non-w. boundary
    \Q … \E  Escaped sequence of chars, where everything between \Q & \E
             matches literally

  Quantifier:
       matches preceeding...
    ?        0 or 1 time
    *        0 or more times
    +        1 or more times
    {n}      Exactly n times
    {m,n}    Between m & n times (inclusive)
    {,n}     Up to =n times
    ..?      Lazy modifier (does incremental backtracking),
             e.g.:  ??, *?, +? & {m,n}?
    ..+      Possessive modifier (disallows backtracking),
             e.g.:  ?+, *+, ++ & {m,n}+

  Subexpressions:                             Backreferences:
    ..|..   Alternation                         \#       For # => 1 to 9
    (..)    Capturing group                     \k<#>    For # => 1 to 99
    (?:..)  Non-capturing group                 \k'#'    For # => 1 to 99
    (?>..)  Atomic group (non-capturing)        (?P=#)   For # => 1 to 99
    (#..)   Comment

  Backref Transforms: *BETA*
       change the letter casing of backreferences found in between...
    \U … \E  Change all letters to upper case
    \L … \E  Change all letters to lower case
    \F … \E  Use phrase-casing, e.g. Ulll-ll lll
    \I … \E  Use title-casing,  e.g. Ulll-ll Ull
    \N … \E  Use name-casing,   e.g. Ulll-Ul Ull
    \u       First letter (only) to upper case
    \l       First letter (only) to lower case

  Named Capturing Groups (any of the following):
    (?<name>/regex/)
    (?'name'/regex/)
    (?P<name>/regex/)

  Named Backreferences (any of the following):
    \k<name>
    \k'name'
    (?P=name)

  Subroutine Calls (sub-expression recall, all equivalent):
    \g<name>
    \g'name'
    (?P>name)
    (?&name)

  Conditionals
    .. (?=/regex/)   Positive lookahead =>  first .. followed by /regex/
    .. (?!/regex/)   Negative lookahead =>  first .. *not* foll. by /regex/
    (?<=/regex/) ..  Positive <= lookbehind first .. preceeded by /regex/
    (?<!/regex/) ..  Negative <= lookbehind first .. *not* prec. by /regex/
    (?(..)/then/|/else/)  Conditional:
                          if (..) then match /then/; or else match /else/
